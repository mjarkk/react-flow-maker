{"version":3,"file":"flowmaker.cjs.js","sources":["../src/logic.js","../src/utils.js","../src/flowTree.js","../src/icons.js","../src/addbutton.js","../src/tooltip.js","../src/input.js","../src/block.js","../src/graphPart.js","../flowmaker.js"],"sourcesContent":["export default class Logic {\n  constructor() {\n    this.conf = {\n      components: {},\n      introComponents: [],\n    }\n    this.errors = []\n  }\n  title(compoentName) {\n    return this.conf.components[compoentName].title\n  }\n  get() {\n    return this.conf\n  }\n  parseNewLogic(input) {\n    const outErrs = []\n    const warn = (...data) => {\n      outErrs.push(data.join(' '))\n      console.log(\"logic parse warning:\", ...data)\n    }\n\n    let conf = {\n      components: {},\n      introComponents: [],\n    }\n\n    if (input.components) {\n      if (Array.isArray(input.components)) {\n        input.components.map((component, i) => {\n          if (!component.name || !component.title) {\n            warn(`logic.components[${i}] does not have a name or title field, this component will be ignored`)\n            return\n          }\n\n          const alreadyUsedNames = []\n\n          let toInsert = {\n            name: component.name,\n            title: component.title,\n            next: component.next ? Array.isArray(component.next) ? component.next : [component.next] : [],\n            tooltip: component.tooltip,\n            inputs: [],\n            advancedInputs: [],\n          }\n\n          if (Array.isArray(component.inputs)) {\n            component.inputs.map((input, inputID) => {\n              if (!input.title || !input.name || !input.type) {\n                warn(`logic.components[${i}].inputs[${inputID}] does not have a name, type or title field, this input will be ignored`)\n                return\n              }\n\n              if (typeof input.validation != 'function' && typeof input.validation != 'undefined') {\n                warn(`logic.components[${i}].inputs[${inputID}].validation must be undefined or a function`)\n                return\n              }\n\n              if (typeof input.tooltip != 'string' && input.tooltip !== undefined) {\n                warn(`logic.components[${i}].inputs[${inputID}].tooltip must be a string or not undefined`)\n                return\n              }\n\n              if (alreadyUsedNames.indexOf(input.name) != -1) {\n                warn(`logic.components[${i}].inputs[${inputID}].name can't be equal to other names`)\n                return\n              }\n\n              let toReturn = {\n                name: input.name,\n                title: input.title,\n                type: input.type,\n                validation: input.validation,\n                tooltip: input.tooltip,\n                default: input.default,\n              }\n\n              switch (input.type) {\n                case 'text':\n                  if (typeof input.default != 'string' && input.default !== undefined) {\n                    warn(`logic.components[${i}].inputs[${inputID}].default must be a string or undefined, using default empty string`)\n                    toReturn.default = ''\n                  }\n                  if (input.default == undefined) {\n                    toReturn.default = ''\n                  }\n                  break;\n                case 'number':\n                  if (typeof input.default != 'number' && input.default !== undefined) {\n                    warn(`logic.components[${i}].inputs[${inputID}].default must be a number or undefined, using default 0`)\n                    toReturn.default = 0\n                  }\n                  if (input.default == undefined) {\n                    toReturn.default = 0\n                  }\n                  break;\n                case 'switch':\n                  if (typeof input.default != 'boolean' && input.default !== undefined) {\n                    warn(`logic.components[${i}].inputs[${inputID}].default must be a boolean or undefined, using default empty string`)\n                    toReturn.default = false\n                  }\n                  if (input.default == undefined) {\n                    toReturn.default = false\n                  }\n                  break;\n                case 'dropdown':\n                  if (!Array.isArray(input.options)) {\n                    warn(`logic.components[${i}].inputs[${inputID}].options is not defined or is not an array, skipping this item`)\n                    return\n                  } else {\n                    toReturn['options'] = input.options.map((option, optionID) => {\n                      if (typeof option.title != 'string' || typeof option.value != 'string' || (typeof option.tooltip != 'string' && option.tooltip != undefined)) {\n                        warn(`logic.components[${i}].inputs[${inputID}].options[${optionID}] does not have the correct items (title string, value string, tooltip string), skipping this item`)\n                        return\n                      }\n                      return {\n                        title: option.title,\n                        tooltip: option.tooltip,\n                        value: option.value,\n                      }\n                    }).filter(item => item)\n                  }\n                  break;\n                default:\n                  warn(`logic.components[${i}].inputs[${inputID}].type = '${input.type}' is not valid, this input will be ignored`)\n                  return\n              }\n\n              alreadyUsedNames.push(input.name)\n              toInsert[input.advanced ? 'advancedInputs' : 'inputs'].push(toReturn)\n              return\n            })\n          }\n\n          conf.components[component.name] = toInsert\n        })\n        Object.keys(conf.components).map(key => {\n          conf.components[key].next = conf.components[key].next.filter(componentKey => {\n            if (conf.components[componentKey]) {\n              return true\n            }\n            warn(`logic.component[???].next contains '${componentKey}' that does not exsist, this item will be ignored`)\n            return false\n          })\n        })\n      } else {\n        warn(`logic.components is not an array`)\n      }\n    }\n\n    if (input.introComponents) {\n      if (Array.isArray(input.introComponents)) {\n        input.introComponents.map(name => {\n          if (conf.components[name]) {\n            conf.introComponents.push(name)\n          } else {\n            warn(`logic.introComponents['${name}'] is not a known component`)\n          }\n        })\n      } else if (typeof input.introComponents == 'string') {\n        if (conf.components[input.introComponents]) {\n          conf.introComponents.push(input.introComponents)\n        } else {\n          warn(`logic.introComponents = '${name}' is not a known component`)\n        }\n      } else {\n        warn(`logic.introComponents is not an array or string`)\n      }\n    }\n\n    this.errors = outErrs\n    this.conf = conf\n    return conf\n  }\n}\n","export default {\n  RandomString(length) {\n    let text = \"\";\n    const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  \n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    \n    return text;\n  }\n}\n","import utils from './utils'\n\nexport default class Tree {\n  constructor(Logic, forceUpdate) {\n    this.Logic = Logic\n    this.forceUpdate = forceUpdate\n    this.maxDepth = 0\n    this.flow = []\n\n    this.exportBuzzy = false\n    this.reExport = false\n\n    this.exportFunc = undefined\n  }\n\n  setExportFunc(func) {\n    this.exportFunc = func\n  }\n\n  caclMaxDepth() {\n    const vm = this\n    this.maxDepth = 0\n\n    const loopOverNext = next => {\n      next.map(item => {\n        if (item.depth > vm.maxDepth) {\n          vm.maxDepth = item.depth\n        }\n        loopOverNext(item.next)\n      })\n    }\n    loopOverNext(this.flow)\n\n    this.forceUpdate()\n  }\n\n  flowItem(component, lastIds, currentDepth) {\n    const id = utils.RandomString(20)\n    return {\n      depth: currentDepth + 1,\n      next: [],\n      id: id,\n      path: [...lastIds, id],\n      inputData: {},\n      inputValidation: {},\n      component,\n    }\n  }\n\n  startFlow(componentName) {\n    let component = this.Logic.conf.components[componentName]\n    if (!component) {\n      return\n    }\n\n    this.flow.push(this.flowItem(component, [], 0))\n    this.caclMaxDepth()\n    this.export()\n  }\n\n  addComponent(componentName, path) {\n    let component = this.Logic.conf.components[componentName]\n    if (!component) {\n      return\n    }\n\n    let toAppendOn = this.findPath(path)\n    toAppendOn.next.push(this.flowItem(component, toAppendOn.path, toAppendOn.depth))\n\n    this.caclMaxDepth()\n    this.export()\n  }\n\n  findPath(path) {\n    let toReturn = undefined\n    const loopOverNext = next => {\n      for (let i = 0; i < next.length; i++) {\n        if (next[i].path === path) {\n          toReturn = next[i]\n          break\n        }\n        loopOverNext(next[i].next)\n      }\n    }\n    loopOverNext(this.flow)\n    return toReturn\n  }\n\n  removeComponent(path) {\n    const loopOverNext = next => {\n      next = Object.assign([], next)\n      for (let i = 0; i < next.length; i++) {\n        if (next[i].path === path) {\n          next.splice(i, 1)\n          break\n        }\n        next[i].next = loopOverNext(next[i].next)\n      }\n      return next\n    }\n    this.flow = loopOverNext(this.flow)\n\n    this.caclMaxDepth()\n    this.export()\n  }\n\n  export() {\n    if (!this.exportBuzzy) {\n      this.exportBuzzy = true\n\n      setTimeout(() => {\n        if (this.reExport) {\n          this.exportBuzzy = false\n          this.reExport = false\n          this.export()\n          return\n        }\n\n        let toExport = []\n\n        const mapOverNext = (posInExpo, next) => {\n          next.map(item => {\n            let inputs = {}\n            let inputErrors = {}\n\n            Object.keys(item.inputData).map(i => {\n              inputs[i] = item.inputData[i].value\n              if (item.inputData[i].error) {\n                inputErrors[i] = item.inputData[i].error\n              }\n            })\n\n            const componentName = item.component.name\n            posInExpo.push({\n              component: {\n                title: item.component.title,\n                name: item.component.name\n              },\n              inputs,\n              inputErrors,\n              id: item.id,\n              next: [],\n            })\n            mapOverNext(posInExpo[posInExpo.length - 1].next, item.next)\n          })\n        }\n\n        mapOverNext(toExport, this.flow)\n\n        if (typeof this.exportFunc == 'function') {\n          this.exportFunc(toExport)\n        }\n\n        setTimeout(() => {\n          this.exportBuzzy = false\n          if (this.reExport) {\n            this.reExport = false\n            this.export()\n          }\n        }, 30)\n      }, 50)\n    } else {\n      this.reExport = true\n    }\n  }\n\n  import(flow) {\n    if (!Array.isArray(flow)) {\n      return\n    }\n\n    let newFlow = []\n\n    const mapOverFlow = (arr, mapTo, lastIds) => {\n      arr.map(item => {\n        let toPush = this.flowItem(this.Logic.conf.components[item.component.name], lastIds, lastIds.length)\n\n        toPush.id = item.id\n        toPush.inputData = Object.keys(item.inputs).reduce((acc, i) => {\n          acc[i] = {\n            value: item.inputs[i],\n            error: ''\n          }\n          return acc\n        }, {})\n        toPush.path.splice(-1, 1)\n        toPush.path.push(item.id)\n        mapTo.push(toPush)\n\n        mapOverFlow(item.next, mapTo[mapTo.length - 1].next, [...lastIds, item.id])\n      })\n    }\n    mapOverFlow(flow, newFlow, [])\n\n    this.flow = newFlow\n    this.caclMaxDepth()\n  }\n\n  updateInputValue(path, value, field, isAdvanced) {\n    let component = this.findPath(path)\n\n    if (component) {\n      if (!isAdvanced) {\n        if (component.component.inputs && component.component.inputs[field]) {\n          const input = component.component.inputs[field]\n          component.inputData[input.name] = value\n        }\n      } else {\n        if (component.component.advancedInputs && component.component.advancedInputs[field]) {\n          const input = component.component.advancedInputs[field]\n          component.inputData[input.name] = value\n        }\n      }\n    }\n\n    this.export()\n  }\n}\n","import React from 'react'\n\nexport const Add = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\nexport const Delete = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v10zM18 4h-2.5l-.71-.71c-.18-.18-.44-.29-.7-.29H9.91c-.26 0-.52.11-.7.29L8.5 4H6c-.55 0-1 .45-1 1s.45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1z\"/></svg>\nexport const DropDown = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M8.71 11.71l2.59 2.59c.39.39 1.02.39 1.41 0l2.59-2.59c.63-.63.18-1.71-.71-1.71H9.41c-.89 0-1.33 1.08-.7 1.71z\"/></svg>\nexport const DropUp = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M8.71 12.29L11.3 9.7c.39-.39 1.02-.39 1.41 0l2.59 2.59c.63.63.18 1.71-.71 1.71H9.41c-.89 0-1.33-1.08-.7-1.71z\"/></svg>\nexport const Info = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 15c-.55 0-1-.45-1-1v-4c0-.55.45-1 1-1s1 .45 1 1v4c0 .55-.45 1-1 1zm1-8h-2V7h2v2z\"/></svg>\nexport const Check = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/></svg>\nexport const Alert = () => <svg className=\"flow-alertIcon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path><line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line><line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"17\"></line></svg>\n","import React, { useState } from 'react'\nimport { Add } from './icons'\n\nexport default function AddButton({ options, Logic, out }) {\n  const [open, setOpen] = useState(false)\n\n  function clickOption(option) {\n    out(option)\n    setOpen(false)\n  }\n\n  return (\n    <div className=\"flow-addIcon\">\n      <div className={`flow-round ${open ? 'flow-open' : 'flow-closed'}`} onClick={() => setOpen(v => !v)}>\n        <Add />\n      </div>\n      <div className={`flow-options ${open ? 'flow-open' : 'flow-closed'}`}>\n        {options ? options.map((option, id) =>\n          <div onClick={() => clickOption(option)} key={id} className=\"flow-option\">\n            {Logic ? Logic.title(option) : option}\n          </div>\n        ) : ''}\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Info } from './icons'\n\nexport default function ToolTip({ tip, transparrent }) {\n  if (!tip) {\n    return '';\n  }\n\n  return (\n    <div className={`flow-tooltip flow-transparrent${transparrent ? 'True' : 'False'}`}>\n      <div className=\"flow-icon\">\n        <Info />\n      </div>\n      <div className=\"flow-noWidth\">\n        <div className=\"flow-fullwidth\">\n          <div className=\"flow-popup\">\n            {tip}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { DropDown, Check } from './icons'\nimport ToolTip from './tooltip'\n\nclass RefID {\n  constructor() {\n    this.val = ''\n  }\n}\n\nexport default function Input({\n  onChange,\n  hiddenDropdown,\n  input,\n  refID,\n  initalVal,\n}) {\n  let [internalRefID] = useState(new RefID)\n  let [state, setState] = useState({\n    value: '',\n    error: '',\n    dropDownSelected: -1,\n    isAfterInit: false,\n    dropDownopen: false,\n  })\n\n  function tellParent() {\n    if (onChange) {\n      onChange({\n        error: state.error,\n        value: state.value,\n      })\n    }\n  }\n\n  function validate(newVal, cb) {\n    if (typeof input.validation == 'function') {\n      let error = input.validation(undefined, newVal)\n      if (typeof error != 'string') {\n        error = ''\n      }\n      setState({\n        error\n      }, cb)\n    }\n    if (typeof cb == 'function') {\n      cb()\n    }\n  }\n\n  function updateDefaultVal() {\n    if ((input && !state.isAfterInit) || internalRefID.val != refID) {\n      internalRefID.val = refID\n      const defaultInput = typeof initalVal != 'undefined' ? initalVal : input.default\n\n      setState({\n        value: defaultInput,\n        isAfterInit: true,\n      }, () => {\n        validate(defaultInput, () => {\n          if (input.type == 'dropdown' && state.dropDownSelected == -1) {\n            let dropDownSelected = 0\n            input.options.map((option, id) => {\n              if (option.value == defaultInput) {\n                dropDownSelected = id\n              }\n            })\n            setState({\n              dropDownSelected\n            })\n          }\n          tellParent()\n        })\n      })\n    }\n  }\n\n  function updateValue(newVal) {\n    setState({ value: newVal }, () => {\n      validate(newVal, () => {\n        tellParent()\n      })\n    })\n  }\n\n  useEffect(() => updateDefaultVal(), [])\n\n  useEffect(() => {\n    updateDefaultVal()\n    if (hiddenDropdown && state.dropDownopen) {\n      setState({\n        dropDownopen: false,\n      })\n    }\n  }, [hiddenDropdown])\n\n  const error = state.error\n  let inputEl\n  if (!input) {\n    return (<div className=\"flow-input\"></div>)\n  }\n\n  const Label = () => <div className=\"flow-label\" onClick={() => inputEl ? inputEl.focus() : input.type == 'switch' ? updateValue(!state.value) : ''}>\n    <span>{input.title}</span>\n    <ToolTip transparrent={true} tip={input.tooltip} />\n  </div>\n\n  return (\n    <div className={`flow-input flow-input-type-${input.type} flow-hasErr${error ? 'True' : 'False'}`}>\n      {input.type != 'switch' ? <Label /> : ''}\n      <div className=\"flow-actualInput\">\n        {(input.type == 'text' || input.type == 'number') ?\n          <div className=\"flow-text\">\n            <input ref={el => inputEl = el} type={input.type} value={state.value} onChange={e => updateValue(e.target.value)} />\n          </div>\n          : input.type == 'switch' ?\n            <div className=\"flow-switch\">\n              <div\n                onClick={() => updateValue(!state.value)}\n                className={`flow-actualSwitch ${state.value ? 'flow-true' : 'flow-false'}`}\n              ><div className=\"flow-inside\"><Check /></div></div>\n            </div>\n            : input.type == 'dropdown' ?\n              <div className=\"flow-dropdown\">\n                <div className=\"flow-select\" onClick={() => setState({ dropDownopen: !state.dropDownopen })}>\n                  <div className=\"flow-optTitle\">\n                    {state.dropDownSelected == -1 || !input.options || input.options.length == 0\n                      ? '...'\n                      : input.options[state.dropDownSelected].title\n                    }\n                  </div>\n                  <div className=\"flow-icon\">\n                    {!input.options || input.options.length == 0 ? '' : <DropDown />}\n                  </div>\n                </div>\n                <div className={`flow-options flow-open${state.dropDownopen ? 'True' : 'False'}`}>\n                  {input.options.map((option, optionID) =>\n                    <div\n                      key={optionID}\n                      className=\"flow-option\"\n                      onClick={() => {\n                        updateValue(option.value)\n                        setState({\n                          dropDownSelected: optionID,\n                          dropDownopen: false,\n                        })\n                      }}\n                    >\n                      <div className=\"flow-optTitle\">{option.title}</div>\n                      <ToolTip tip={option.tooltip} />\n                    </div>\n                  )}\n                </div>\n              </div>\n              : ''}\n      </div>\n      {input.type == 'switch' ? <Label /> : ''}\n      {error ?\n        <div className=\"flow-error\">{error}</div>\n        : ''}\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport Input from './input'\nimport { Delete, Add, DropDown, DropUp, Alert } from './icons'\nimport ToolTip from './tooltip'\n\nexport default function Block({ Tree, Logic, data, graphInstanceForceUpdate, graphParrentInstance }) {\n  let [state, setState] = useState({\n    hover: false,\n    showAddOptions: false,\n    showAdvanced: false,\n  });\n\n  function remove() {\n    Tree.removeComponent(data.path)\n  }\n  function realAdd(toAdd) {\n    setState({\n      showAddOptions: false,\n    })\n\n    if (!toAdd) {\n      return\n    }\n\n    Tree.addComponent(toAdd, data.path)\n  }\n  function add() {\n    if (data.component.next.length == 1) {\n      realAdd(data.component.next[0])\n      return\n    }\n\n    setState({\n      showAddOptions: true,\n    })\n  }\n\n  if (!data) {\n    return ''\n  }\n  const comp = data.component\n  const inputs = comp.inputs\n  const advancedInputs = comp.advancedInputs\n\n  return (\n    <div\n      className={`flow-fullBlock flow-hover${state.hover && !state.showAddOptions ? 'True' : 'False'}`}\n      onMouseOver={() => {\n        if (!state.hover) {\n          setState({ hover: true })\n        }\n      }}\n      onMouseOut={() => {\n        if (state.hover) {\n          setState({ hover: false })\n        }\n      }}\n    >\n      <div className=\"flow-side\">\n        <div className=\"flow-innerSide\">\n          <div className=\"flow-round\" onClick={remove}>\n            <Delete />\n          </div>\n        </div>\n      </div>\n      <div className=\"flow-middle\">\n        <div className=\"flow-title\">{comp.title}<ToolTip transparrent={true} tip={comp.tooltip} /></div>\n        <div className=\"flow-inputs\">\n          {\n            inputs.map((input, inputID) => {\n              const inputData = data.inputData[input.name]\n              return (\n                <Input\n                  refID={data.id}\n                  key={inputID}\n                  input={input}\n                  initalVal={inputData ? inputData.value : undefined}\n                  onChange={inputData =>\n                    Tree.updateInputValue(data.path, inputData, inputID, false)\n                  }\n                />\n              )\n            })\n          }\n          {advancedInputs.length > 0 ?\n            (() => {\n              const hasErrors = advancedInputs.filter(el => (data.inputData[el.name] && el.validation ? el.validation(undefined, data.inputData[el.name].value) : true) !== true).length > 0\n              const showHasErrors = hasErrors && !state.showAdvanced\n              return (\n                <div className=\"flow-showAdvanced\">\n                  <div\n                    className={`flow-button error${showHasErrors ? 'True' : 'False'}`}\n                    onClick={() => {\n                      setState({ showAdvanced: !state.showAdvanced }, () => {\n                        if (graphParrentInstance) {\n                          graphParrentInstance.forceUpdate()\n                        } else if (graphInstanceForceUpdate) {\n                          graphInstanceForceUpdate()\n                        }\n                      })\n                    }}\n                  >{showHasErrors ? <Alert /> : ''}Advanced {state.showAdvanced ? <DropUp /> : <DropDown />}</div>\n                </div>\n              )\n            })()\n            : ''}\n        </div>\n        <div className={`flow-inputs flow-advancedInputs flow-show${state.showAdvanced ? 'True' : 'False'}`}>\n          {advancedInputs.map((input, inputID) => {\n            const inputData = data.inputData[input.name]\n            return (\n              <Input\n                hiddenDropdown={!state.showAdvanced}\n                key={inputID}\n                input={input}\n                initalVal={inputData ? inputData.value : undefined}\n                onChange={inputData => Tree.updateInputValue(data.path, inputData, inputID, true)}\n              />\n            )\n          })}\n        </div>\n      </div>\n      {comp.next.length > 0 ?\n        <div className={`flow-nextOptions flow-show${state.showAddOptions ? 'True' : 'False'}`}>\n          <div className=\"flow-closePopup\" onClick={() => realAdd()}>\n            <Add />\n          </div>\n          <div className=\"flow-pos\">\n            <div className=\"flow-optionsTitle\">Options</div>\n            {comp.next.map((componentName, key) =>\n              <div\n                onClick={() => realAdd({ componentName })}\n                className=\"flow-option\"\n                key={key}\n              >{props ? Logic.title(componentName) : componentName}</div>\n            )}\n          </div>\n        </div>\n        : ''}\n      {comp.next.length > 0 ?\n        <div className=\"flow-side\">\n          <div className=\"flow-innerSide\">\n            <div className=\"flow-round\" onClick={() => add()}>\n              <Add />\n            </div>\n          </div>\n        </div>\n        : ''}\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport Block from './block'\n\nconst GraphPart = function ({\n  connectTo,\n  connectToInstance,\n  itemWidth,\n  width,\n  Logic,\n  Tree,\n  data,\n}) {\n  const [state, setState] = useState({\n    element: undefined,\n    lastParentPosition: 0,\n  })\n\n  const [_, forceUpdate] = useState(false)\n\n  let mounted = false\n\n  function watchParent() {\n    if (mounted) {\n      let parentEl = connectTo\n      let parent = undefined\n      if (parentEl) {\n        parent = parentEl.getBoundingClientRect()\n        if (parent.top != state.lastParentPosition) {\n          setState({\n            lastParentPosition: parent.top\n          })\n        }\n      }\n      setTimeout(() => {\n        watchParent()\n      }, 800)\n    }\n  }\n\n  useEffect(() => {\n    mounted = true\n    watchParent()\n    return () => mounted = false\n  }, [])\n\n  let parentLineHeight = 0\n  let parentLineToTop = 0\n  let type = ''\n\n  if (connectTo && state.element) {\n    let parent = connectTo.getBoundingClientRect()\n    let child = state.element.getBoundingClientRect()\n    let spaceBetween = (parent.y + (parent.height / 2)) - (child.y + (child.height / 2))\n\n    if (spaceBetween == 0) {\n      parentLineHeight = 20\n      parentLineToTop = 10\n      type = 'straight'\n    } else if (spaceBetween < 0) {\n      parentLineHeight = ((-spaceBetween) + 20)\n      parentLineToTop = parentLineHeight - 10\n      type = 'bottomToTop'\n    } else {\n      parentLineHeight = spaceBetween + 20\n      parentLineToTop = 10\n      type = 'topToBottom'\n    }\n  }\n  return (\n    <div className=\"flow-graphPart\" style={{ width }}>\n      {parentLineHeight && parentLineToTop && type ?\n        <div className=\"flow-lineToParrent\" style={{ bottom: `${parentLineToTop}px` }}>\n          <svg viewBox={`0 0 80 ${parentLineHeight}`} height={`${parentLineHeight}px`} style={{ minHeight: `${parentLineHeight}px` }} xmlns=\"http://www.w3.org/2000/svg\">\n            {type == 'bottomToTop' ?\n              <path\n                strokeWidth=\"7\"\n                stroke=\"#ccc\"\n                strokeLinecap=\"round\"\n                fill=\"none\"\n                d={`M0,10 C70,10 30,${parentLineHeight - 10} 80,${parentLineHeight - 10}`}\n              />\n              : type == 'topToBottom' ?\n                <path\n                  strokeWidth=\"7\"\n                  stroke=\"#ccc\"\n                  strokeLinecap=\"round\"\n                  fill=\"none\"\n                  d={`M0,${parentLineHeight - 10} C70,${parentLineHeight - 10} 30,10 80,10`}\n                />\n                :\n                <path\n                  strokeWidth=\"7\"\n                  stroke=\"#ccc\"\n                  strokeLinecap=\"round\"\n                  fill=\"none\"\n                  d=\"M0,10 C70,10 30,10 80,10\"\n                />\n            }\n          </svg>\n        </div>\n        : ''}\n      <div\n        ref={element => {\n          let parentEl = connectTo\n          let parent = undefined\n          if (parentEl) {\n            parent = parentEl.getBoundingClientRect()\n          }\n\n          if (typeof state.element == 'object') {\n            if (!parent || parent.top == state.lastParentPosition) {\n              return\n            }\n          }\n\n          let toUpdate = {\n            element,\n          }\n\n          if (parent) {\n            toUpdate.lastParentPosition = parent.top\n          }\n\n          setState(toUpdate)\n        }}\n        className=\"flow-graph\"\n        style={{ minWidth: itemWidth }}\n      >\n        <Block\n          Tree={Tree}\n          Logic={Logic}\n          data={data}\n          graphInstanceForceUpdate={forceUpdate(v => !v)}\n          graphParrentInstance={connectToInstance}\n        />\n      </div>\n      <div className=\"flow-next\">\n        {data.next.map((item, i) =>\n          <GraphPart\n            Tree={Tree}\n            Logic={Logic}\n            connectTo={state.element}\n            connectToInstance={this}\n            width={width - itemWidth}\n            itemWidth={itemWidth}\n            key={i}\n            data={item}\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default GraphPart\n","import React, { useEffect, useState } from 'react'\nimport './style.styl'\nimport LogicClass from './src/logic'\nimport TreeClass from './src/flowTree'\nimport AddButton from './src/addbutton'\nimport GraphPart from './src/graphPart'\nimport sha1 from 'js-sha1'\n\nclass LastLogicHash {\n  constructor() {\n    this.val = ''\n  }\n}\n\nexport default function FlowMaker({ flow, logic, onChange }) {\n  const [_, setForceUpdateVal] = useState(false);\n  const forceUpdate = () => setForceUpdateVal(v => !v);\n\n  const [Logic] = useState(new LogicClass())\n  const [Tree] = useState(new TreeClass(Logic, forceUpdate))\n\n  const [lastlogicHash] = useState(new LastLogicHash)\n\n  const [state, setState] = useState({\n    settings: Logic.get(),\n  })\n\n  function afterMount() {\n    if (typeof onChange == 'function')\n      Tree.setExportFunc(onChange)\n    if (typeof flow == 'object')\n      Tree.import(flow)\n  }\n\n  useEffect(() => {\n    const newHash = sha1(logic)\n    if (newHash != lastlogicHash.val) {\n      lastlogicHash.val = newHash\n      setState({\n        settings: Logic.parseNewLogic(logic)\n      }, () => afterMount())\n    } else {\n      afterMount()\n    }\n  }, [])\n\n  return (\n    <div className=\"flowMakerComp\">\n      <div className=\"flowMakerContainer\" style={{ minWidth: `${250 + (380 * Tree.maxDepth)}px` }}>\n        <div className=\"flow-row\" style={{ minWidth: '250px' }}>\n          {state.settings.introComponents.length > 0 ?\n            <div className=\"flow-startPoint\">\n              <h3>Start here</h3>\n              <AddButton\n                Tree={Tree}\n                Logic={Logic}\n                options={state.settings.introComponents}\n                out={componentName => Tree.startFlow(componentName)}\n              />\n            </div>\n            : ''}\n        </div>\n\n        <div className=\"flow-actualGraph\" style={{ width: `${380 * Tree.maxDepth}px` }}>\n          {Tree.flow.map((item, i) =>\n            <GraphPart\n              Tree={Tree}\n              Logic={Logic}\n              width={380 * Tree.maxDepth}\n              itemWidth={380}\n              key={i}\n              data={item}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"names":["Logic","constructor","conf","components","introComponents","errors","title","compoentName","this","get","parseNewLogic","input","outErrs","warn","data","push","join","console","log","Array","isArray","map","component","i","name","alreadyUsedNames","toInsert","next","tooltip","inputs","advancedInputs","inputID","type","validation","undefined","indexOf","toReturn","default","options","option","optionID","value","filter","item","advanced","Object","keys","key","componentKey","RandomString","length","text","possible","charAt","Math","floor","random","Tree","forceUpdate","maxDepth","flow","exportBuzzy","reExport","exportFunc","setExportFunc","func","caclMaxDepth","vm","loopOverNext","depth","flowItem","lastIds","currentDepth","id","utils","path","inputData","inputValidation","startFlow","componentName","export","addComponent","toAppendOn","findPath","removeComponent","assign","splice","setTimeout","toExport","mapOverNext","posInExpo","inputErrors","error","import","newFlow","mapOverFlow","arr","mapTo","toPush","reduce","acc","updateInputValue","field","isAdvanced","Add","React","xmlns","width","height","viewBox","d","fill","Delete","DropDown","DropUp","Info","Check","Alert","className","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","AddButton","out","open","setOpen","useState","onClick","v","clickOption","ToolTip","tip","transparrent","RefID","val","Input","onChange","hiddenDropdown","refID","initalVal","internalRefID","state","setState","dropDownSelected","isAfterInit","dropDownopen","tellParent","validate","newVal","cb","updateDefaultVal","defaultInput","updateValue","useEffect","inputEl","Label","focus","ref","el","e","target","Block","graphInstanceForceUpdate","graphParrentInstance","hover","showAddOptions","showAdvanced","realAdd","toAdd","comp","onMouseOver","onMouseOut","showHasErrors","props","GraphPart","connectTo","connectToInstance","itemWidth","element","lastParentPosition","_","mounted","watchParent","parent","parentEl","getBoundingClientRect","top","parentLineHeight","parentLineToTop","child","spaceBetween","y","style","bottom","minHeight","toUpdate","minWidth","LastLogicHash","logic","setForceUpdateVal","LogicClass","TreeClass","lastlogicHash","settings","afterMount","newHash","sha1"],"mappings":"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"}