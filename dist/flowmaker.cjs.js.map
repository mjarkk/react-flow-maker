{"version":3,"file":"flowmaker.cjs.js","sources":["../src/logic.js","../src/utils.js","../src/flowTree.js","../src/icons.js","../src/addbutton.js","../src/tooltip.js","../src/input.js","../src/block.js","../src/graphPart.js","../flowmaker.js"],"sourcesContent":["export default class Logic {\n  constructor() {\n    this.conf = {\n      components: {},\n      introComponents: [],\n    }\n    this.errors = []\n  }\n  title(compoentName) {\n    return this.conf.components[compoentName].title\n  }\n  get() {\n    return this.conf\n  }\n\n  parseInput(input, warn = err => console.log('logic parse warning:', err)) {\n    let res = {\n      name: input.name,\n      title: input.title,\n      type: input.type,\n      validation: input.validation,\n      tooltip: input.tooltip,\n      default: input.default,\n    }\n\n    switch (input.type) {\n      case 'text':\n        if (typeof input.default != 'string' && input.default !== undefined) {\n          warn(`.inputs[${input.name}].default must be a string or undefined, using default empty string`)\n          res.default = ''\n        }\n        if (input.default == undefined) {\n          res.default = ''\n        }\n        break;\n      case 'number':\n        if (typeof input.default != 'number' && input.default !== undefined) {\n          warn(`.inputs[${input.name}].default must be a number or undefined, using default 0`)\n          res.default = 0\n        }\n        if (input.default == undefined) {\n          res.default = 0\n        }\n        break;\n      case 'switch':\n        if (typeof input.default != 'boolean' && input.default !== undefined) {\n          warn(`.inputs[${input.name}].default must be a boolean or undefined, using default empty string`)\n          res.default = false\n        }\n        if (input.default == undefined) {\n          res.default = false\n        }\n        break;\n      case 'dropdown':\n        if (!Array.isArray(input.options)) {\n          warn(`.inputs[${input.name}].options is not defined or is not an array, skipping this item`)\n          return\n        } else {\n          res['options'] = input.options.map((option, optionID) => {\n            if (typeof option.title != 'string' || typeof option.value != 'string' || (typeof option.tooltip != 'string' && option.tooltip != undefined)) {\n              warn(`.inputs[${input.name}].options[${optionID}] does not have the correct items (title string, value string, tooltip string), skipping this item`)\n              return\n            }\n            return {\n              title: option.title,\n              tooltip: option.tooltip,\n              value: option.value,\n            }\n          }).filter(item => item)\n        }\n        break;\n      default:\n        warn(`.inputs[${input.name}].type = '${input.type}' is not valid, this input will be ignored`)\n        return\n    }\n\n    return res;\n  }\n\n  parseNewLogic(input) {\n    const outErrs = []\n    const warn = (...data) => {\n      outErrs.push(data.join(' '))\n      console.log(\"logic parse warning:\", ...data)\n    }\n\n    let conf = {\n      components: {},\n      introComponents: [],\n    }\n\n    if (input.components) {\n      if (Array.isArray(input.components)) {\n        input.components.map((component, i) => {\n          if (!component.name || !component.title) {\n            warn(`logic.components[${i}] does not have a name or title field, this component will be ignored`)\n            return\n          }\n\n          const alreadyUsedNames = []\n\n          let toInsert = {\n            name: component.name,\n            title: component.title,\n            next: component.next ? Array.isArray(component.next) ? component.next : [component.next] : [],\n            tooltip: component.tooltip,\n            inputs: [],\n            getInputs: undefined,\n            advancedInputs: [],\n          }\n\n          if (component.getInputs) {\n            toInsert.getInputs = component.getInputs\n          }\n\n          if (Array.isArray(component.inputs)) {\n            component.inputs.map((input, inputID) => {\n              if (!input.title || !input.name || !input.type) {\n                warn(`logic.components[${i}].inputs[${inputID}] does not have a name, type or title field, this input will be ignored`)\n                return\n              }\n\n              if (typeof input.validation != 'function' && typeof input.validation != 'undefined') {\n                warn(`logic.components[${i}].inputs[${inputID}].validation must be undefined or a function`)\n                return\n              }\n\n              if (typeof input.tooltip != 'string' && input.tooltip !== undefined) {\n                warn(`logic.components[${i}].inputs[${inputID}].tooltip must be a string or not undefined`)\n                return\n              }\n\n              if (alreadyUsedNames.indexOf(input.name) != -1) {\n                warn(`logic.components[${i}].inputs[${inputID}].name can't be equal to other names`)\n                return\n              }\n\n              const toAdd = this.parseInput(input, err => warn(`logic.components[${i}]${err}`))\n              if (!toAdd) return;\n\n              alreadyUsedNames.push(input.name)\n              toInsert[input.advanced ? 'advancedInputs' : 'inputs'].push(toAdd)\n              return\n            })\n          }\n\n          conf.components[component.name] = toInsert\n        })\n        Object.keys(conf.components).map(key => {\n          conf.components[key].next = conf.components[key].next.filter(componentKey => {\n            if (conf.components[componentKey]) {\n              return true\n            }\n            warn(`logic.component[???].next contains '${componentKey}' that does not exsist, this item will be ignored`)\n            return false\n          })\n        })\n      } else {\n        warn(`logic.components is not an array`)\n      }\n    }\n\n    if (input.introComponents) {\n      if (Array.isArray(input.introComponents)) {\n        input.introComponents.map(name => {\n          if (conf.components[name]) {\n            conf.introComponents.push(name)\n          } else {\n            warn(`logic.introComponents['${name}'] is not a known component`)\n          }\n        })\n      } else if (typeof input.introComponents == 'string') {\n        if (conf.components[input.introComponents]) {\n          conf.introComponents.push(input.introComponents)\n        } else {\n          warn(`logic.introComponents = '${name}' is not a known component`)\n        }\n      } else {\n        warn(`logic.introComponents is not an array or string`)\n      }\n    }\n\n    this.errors = outErrs\n    this.conf = conf\n    return conf\n  }\n}\n","export default {\n  RandomString(length) {\n    let text = \"\";\n    const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  \n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    \n    return text;\n  }\n}\n","import utils from './utils'\n\nexport default class Tree {\n  constructor(Logic, forceUpdate) {\n    this.Logic = Logic\n    this.forceUpdate = forceUpdate\n    this.maxDepth = 0\n    this.flow = []\n\n    this.exportBuzzy = false\n    this.reExport = false\n\n    this.exportFunc = undefined\n  }\n\n  setExportFunc(func) {\n    this.exportFunc = func\n  }\n\n  caclMaxDepth() {\n    const vm = this\n    this.maxDepth = 0\n\n    const loopOverNext = next => {\n      next.map(item => {\n        if (item.depth > vm.maxDepth) {\n          vm.maxDepth = item.depth\n        }\n        loopOverNext(item.next)\n      })\n    }\n    loopOverNext(this.flow)\n\n    this.forceUpdate()\n  }\n\n  flowItem(component, lastIds, currentDepth) {\n    const id = utils.RandomString(20)\n    return {\n      depth: currentDepth + 1,\n      next: [],\n      id: id,\n      path: [...lastIds, id],\n      inputData: {},\n      inputValidation: {},\n      component,\n    }\n  }\n\n  startFlow(componentName) {\n    let component = this.Logic.conf.components[componentName]\n    if (!component) {\n      return\n    }\n\n    this.flow.push(this.flowItem(component, [], 0))\n    this.caclMaxDepth()\n    this.export()\n  }\n\n  addComponent(componentName, path) {\n    let component = this.Logic.conf.components[componentName]\n    if (!component) {\n      return\n    }\n\n    let toAppendOn = this.findPath(path)\n    toAppendOn.next.push(this.flowItem(component, toAppendOn.path, toAppendOn.depth))\n\n    this.caclMaxDepth()\n    this.export()\n  }\n\n  findPath(path) {\n    let toReturn = undefined\n    const loopOverNext = next => {\n      for (let i = 0; i < next.length; i++) {\n        if (next[i].path === path) {\n          toReturn = next[i]\n          break\n        }\n        loopOverNext(next[i].next)\n      }\n    }\n    loopOverNext(this.flow)\n    return toReturn\n  }\n\n  removeComponent(path) {\n    const loopOverNext = next => {\n      next = Object.assign([], next)\n      for (let i = 0; i < next.length; i++) {\n        if (next[i].path === path) {\n          next.splice(i, 1)\n          break\n        }\n        next[i].next = loopOverNext(next[i].next)\n      }\n      return next\n    }\n    this.flow = loopOverNext(this.flow)\n\n    this.caclMaxDepth()\n    this.export()\n  }\n\n  itemToExport(item) {\n    let inputs = {}\n    let inputErrors = {}\n\n    Object.keys(item.inputData).map(i => {\n      inputs[i] = item.inputData[i].value\n      if (item.inputData[i].error) {\n        inputErrors[i] = item.inputData[i].error\n      }\n    })\n\n    return {\n      component: {\n        title: item.component.title,\n        name: item.component.name\n      },\n      inputs,\n      inputErrors,\n      id: item.id,\n      next: [],\n    }\n  }\n\n  export() {\n    if (!this.exportBuzzy) {\n      this.exportBuzzy = true\n\n      setTimeout(() => {\n        if (this.reExport) {\n          this.exportBuzzy = false\n          this.reExport = false\n          this.export()\n          return\n        }\n\n        let toExport = []\n\n        const mapOverNext = (posInExpo, next) => {\n          next.map(item => {\n            posInExpo.push(this.itemToExport(item))\n            mapOverNext(posInExpo[posInExpo.length - 1].next, item.next)\n          })\n        }\n\n        mapOverNext(toExport, this.flow)\n\n        if (typeof this.exportFunc == 'function') {\n          this.exportFunc(toExport)\n        }\n\n        setTimeout(() => {\n          this.exportBuzzy = false\n          if (this.reExport) {\n            this.reExport = false\n            this.export()\n          }\n        }, 30)\n      }, 50)\n    } else {\n      this.reExport = true\n    }\n  }\n\n  import(flow) {\n    if (!Array.isArray(flow)) {\n      return\n    }\n\n    let newFlow = []\n\n    const mapOverFlow = (arr, mapTo, lastIds) => {\n      arr.map(item => {\n        let toPush = this.flowItem(this.Logic.conf.components[item.component.name], lastIds, lastIds.length)\n\n        toPush.id = item.id\n        toPush.inputData = Object.keys(item.inputs).reduce((acc, i) => {\n          acc[i] = {\n            value: item.inputs[i],\n            error: ''\n          }\n          return acc\n        }, {})\n        toPush.path.splice(-1, 1)\n        toPush.path.push(item.id)\n        mapTo.push(toPush)\n\n        mapOverFlow(item.next, mapTo[mapTo.length - 1].next, [...lastIds, item.id])\n      })\n    }\n    mapOverFlow(flow, newFlow, [])\n\n    this.flow = newFlow\n    this.caclMaxDepth()\n  }\n\n  updateInputValue(path, value, field) {\n    let component = this.findPath(path)\n    if (component) {\n      component.inputData[field] = value\n    }\n    this.export()\n  }\n}\n","import React from 'react'\n\nexport const Add = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\nexport const Delete = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v10zM18 4h-2.5l-.71-.71c-.18-.18-.44-.29-.7-.29H9.91c-.26 0-.52.11-.7.29L8.5 4H6c-.55 0-1 .45-1 1s.45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1z\"/></svg>\nexport const DropDown = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M8.71 11.71l2.59 2.59c.39.39 1.02.39 1.41 0l2.59-2.59c.63-.63.18-1.71-.71-1.71H9.41c-.89 0-1.33 1.08-.7 1.71z\"/></svg>\nexport const DropUp = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M8.71 12.29L11.3 9.7c.39-.39 1.02-.39 1.41 0l2.59 2.59c.63.63.18 1.71-.71 1.71H9.41c-.89 0-1.33-1.08-.7-1.71z\"/></svg>\nexport const Info = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 15c-.55 0-1-.45-1-1v-4c0-.55.45-1 1-1s1 .45 1 1v4c0 .55-.45 1-1 1zm1-8h-2V7h2v2z\"/></svg>\nexport const Check = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/></svg>\nexport const Alert = () => <svg className=\"flow-alertIcon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path><line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line><line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"17\"></line></svg>\n","import React, { useState } from 'react'\nimport { Add } from './icons'\n\nexport default function AddButton({ options, Logic, out }) {\n  const [open, setOpen] = useState(false)\n\n  function clickOption(option) {\n    out(option)\n    setOpen(false)\n  }\n\n  return (\n    <div className=\"flow-addIcon\">\n      <div className={`flow-round ${open ? 'flow-open' : 'flow-closed'}`} onClick={() => setOpen(v => !v)}>\n        <Add />\n      </div>\n      <div className={`flow-options ${open ? 'flow-open' : 'flow-closed'}`}>\n        {options ? options.map((option, id) =>\n          <div onClick={() => clickOption(option)} key={id} className=\"flow-option\">\n            {Logic ? Logic.title(option) : option}\n          </div>\n        ) : ''}\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Info } from './icons'\n\nexport default function ToolTip({ tip, transparrent }) {\n  if (!tip) {\n    return '';\n  }\n\n  return (\n    <div className={`flow-tooltip flow-transparrent${transparrent ? 'True' : 'False'}`}>\n      <div className=\"flow-icon\">\n        <Info />\n      </div>\n      <div className=\"flow-noWidth\">\n        <div className=\"flow-fullwidth\">\n          <div className=\"flow-popup\">\n            {tip}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { DropDown, Check } from './icons'\nimport ToolTip from './tooltip'\n\nclass RefID {\n  constructor() {\n    this.val = ''\n  }\n}\n\nexport default function Input({\n  onChange,\n  hiddenDropdown,\n  input,\n  refID,\n  initalVal,\n}) {\n  const [internalRefID] = useState(new RefID)\n  const [state, setState] = useState({\n    dropDownSelected: -1,\n    dropDownopen: false,\n  })\n  const [isAfterInit, setIsAfterInit] = useState(false)\n  const [value, setValue] = useState(undefined)\n  const [error, setError] = useState('')\n\n  useEffect(() => {\n    if (typeof input.validation == 'function' && value !== undefined) {\n      let error = input.validation(undefined, value)\n      if (typeof error != 'string') {\n        error = ''\n      }\n      setError(error)\n    }\n  }, [value])\n\n  useEffect(() => {\n    if (onChange && value !== undefined) {\n      onChange({\n        error,\n        value,\n      })\n    }\n  }, [value, error])\n\n  function updateDefaultVal() {\n    if ((input && !isAfterInit) || internalRefID.val != refID) {\n      internalRefID.val = refID\n\n      let defaultInput = typeof initalVal != 'undefined' ? initalVal : input.default\n      if (defaultInput === undefined) {\n        if (input.type == 'text' || input.type == 'number') {\n          defaultInput = ''\n        } else if (input.type == 'switch') {\n          defaultInput = false;\n        }\n      }\n      setValue(defaultInput)\n\n      if (input.type == 'dropdown' && state.dropDownSelected == -1) {\n        let dropDownSelected = 0\n        input.options.map((option, id) => {\n          if (option.value == defaultInput) {\n            dropDownSelected = id\n          }\n        })\n        setState(v => ({\n          ...v,\n          dropDownSelected\n        }))\n      }\n\n      setIsAfterInit(true)\n    }\n  }\n\n  useEffect(() => updateDefaultVal(), [])\n\n  useEffect(() => {\n    updateDefaultVal()\n    if (hiddenDropdown && state.dropDownopen) {\n      setState(v => ({\n        ...v,\n        dropDownopen: false,\n      }))\n    }\n  }, [hiddenDropdown])\n\n  let inputEl\n  if (!input) {\n    return (<div className=\"flow-input\"></div>)\n  }\n\n  const Label = () =>\n    <div\n      className=\"flow-label\"\n      onClick={() => inputEl ? inputEl.focus() : input.type == 'switch' ? setValue(!value) : ''}\n    >\n      <span>{input.title}</span>\n      <ToolTip transparrent={true} tip={input.tooltip} />\n    </div>\n\n  return (\n    <div className={`flow-input flow-input-type-${input.type} flow-hasErr${error ? 'True' : 'False'}`}>\n      {input.type != 'switch' ? <Label /> : ''}\n      <div className=\"flow-actualInput\">\n        {(value !== undefined && (input.type == 'text' || input.type == 'number')) ?\n          <div className=\"flow-text\">\n            <input\n              ref={el => inputEl = el}\n              type={input.type}\n              value={value}\n              onChange={e => setValue(e.target.value)}\n            />\n          </div>\n          : (value !== undefined && input.type == 'switch') ?\n            <div className=\"flow-switch\">\n              <div\n                onClick={() => setValue(!value)}\n                className={`flow-actualSwitch ${value ? 'flow-true' : 'flow-false'}`}\n              ><div className=\"flow-inside\"><Check /></div></div>\n            </div>\n            : input.type == 'dropdown' ?\n              <div className=\"flow-dropdown\">\n                <div className=\"flow-select\" onClick={() => setState(v => ({ ...v, dropDownopen: !state.dropDownopen }))}>\n                  <div className=\"flow-optTitle\">\n                    {state.dropDownSelected == -1 || !input.options || input.options.length == 0\n                      ? '...'\n                      : input.options[state.dropDownSelected].title\n                    }\n                  </div>\n                  <div className=\"flow-icon\">\n                    {!input.options || input.options.length == 0 ? '' : <DropDown />}\n                  </div>\n                </div>\n                <div className={`flow-options flow-open${state.dropDownopen ? 'True' : 'False'}`}>\n                  {input.options.map((option, optionID) =>\n                    <div\n                      key={optionID}\n                      className=\"flow-option\"\n                      onClick={() => {\n                        setValue(option.value)\n                        setState(v => ({\n                          ...v,\n                          dropDownSelected: optionID,\n                          dropDownopen: false,\n                        }))\n                      }}\n                    >\n                      <div className=\"flow-optTitle\">{option.title}</div>\n                      <ToolTip tip={option.tooltip} />\n                    </div>\n                  )}\n                </div>\n              </div>\n              : ''}\n      </div>\n      {input.type == 'switch' ? <Label /> : ''}\n      {error ?\n        <div className=\"flow-error\">{error}</div>\n        : ''}\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport Input from './input'\nimport { Delete, Add, DropDown, DropUp, Alert } from './icons'\nimport ToolTip from './tooltip'\n\nexport default function Block({\n  Tree,\n  Logic,\n  data,\n  graphInstanceForceUpdate,\n  graphParrentInstanceForceUpdate,\n  reRenderFullTree,\n}) {\n  let [state, setState] = useState({\n    hover: false,\n    showAddOptions: false,\n  });\n\n  const [showAdvanced, setShowAdvanced] = useState(false)\n  const [_, setForceUpdateState] = useState(false)\n  const forceUpdate = () => setForceUpdateState(v => !v)\n\n  function remove() {\n    Tree.removeComponent(data.path)\n    reRenderFullTree()\n  }\n\n  function realAdd(toAdd) {\n    setState(v => ({\n      ...v,\n      showAddOptions: false,\n    }))\n\n    if (!toAdd) {\n      return\n    }\n\n    Tree.addComponent(toAdd, data.path)\n    reRenderFullTree()\n  }\n\n  function potentialAdd() {\n    if (data.component.next.length == 1) {\n      realAdd(data.component.next[0])\n      return\n    }\n\n    setState(v => ({\n      ...v,\n      showAddOptions: true,\n    }))\n  }\n\n  useEffect(() => {\n    if (graphParrentInstanceForceUpdate) {\n      graphParrentInstanceForceUpdate()\n    } else if (graphInstanceForceUpdate) {\n      graphInstanceForceUpdate()\n    }\n  }, [showAdvanced])\n\n  if (!data) {\n    return ''\n  }\n  const comp = data.component\n  let { inputs, advancedInputs } = comp\n\n  if (comp.getInputs) {\n    const args = Tree.itemToExport(data)\n    let newInputs = comp.getInputs(args)\n    if (Array.isArray(newInputs)) {\n      inputs = [];\n      advancedInputs = [];\n      newInputs.map(input => {\n        const parsedInput = Logic.parseInput(input)\n        if (parsedInput) {\n          if (input.advanced) advancedInputs.push(parsedInput)\n          else inputs.push(parsedInput)\n        }\n      })\n    }\n  }\n\n  return (\n    <div\n      className={`flow-fullBlock flow-hover${state.hover && !state.showAddOptions ? 'True' : 'False'}`}\n      onMouseEnter={() => {\n        if (!state.hover) {\n          setState(v => ({ ...v, hover: true }))\n        }\n      }}\n      onMouseLeave={() => {\n        if (state.hover) {\n          setState(v => ({ ...v, hover: false }))\n        }\n      }}\n    >\n      <div className=\"flow-side\">\n        <div className=\"flow-innerSide\">\n          <div className=\"flow-round\" onClick={remove}>\n            <Delete />\n          </div>\n        </div>\n      </div>\n      <div className=\"flow-middle\">\n        <div className=\"flow-title\">{comp.title}<ToolTip transparrent={true} tip={comp.tooltip} /></div>\n        <div className=\"flow-inputs\">\n          {\n            inputs.map(input => {\n              const inputData = data.inputData[input.name]\n              return (\n                <Input\n                  refID={data.id}\n                  key={input.name}\n                  input={input}\n                  initalVal={inputData ? inputData.value : undefined}\n                  onChange={inputData => {\n                    Tree.updateInputValue(data.path, inputData, input.name)\n                    forceUpdate()\n                  }}\n                />\n              )\n            })\n          }\n          {advancedInputs.length > 0 ?\n            (() => {\n              const hasErrors = advancedInputs.filter(el => (data.inputData[el.name] && el.validation ? el.validation(undefined, data.inputData[el.name].value) : true) !== true).length > 0\n              const showHasErrors = hasErrors && !showAdvanced\n              return (\n                <div className=\"flow-showAdvanced\">\n                  <div\n                    className={`flow-button error${showHasErrors ? 'True' : 'False'}`}\n                    onClick={() => setShowAdvanced(!showAdvanced)}\n                  >{showHasErrors ? <Alert /> : ''}Advanced {showAdvanced ? <DropUp /> : <DropDown />}</div>\n                </div>\n              )\n            })()\n            : ''}\n        </div>\n        <div className={`flow-inputs flow-advancedInputs flow-show${showAdvanced ? 'True' : 'False'}`}>\n          {advancedInputs.map((input, inputID) => {\n            const inputData = data.inputData[input.name]\n            return (\n              <Input\n                hiddenDropdown={!showAdvanced}\n                key={inputID}\n                input={input}\n                initalVal={inputData ? inputData.value : undefined}\n                onChange={inputData => {\n                  Tree.updateInputValue(data.path, inputData, input.name)\n                  forceUpdate()\n                }}\n              />\n            )\n          })}\n        </div>\n      </div>\n      {comp.next.length > 0 ?\n        <div className={`flow-nextOptions flow-show${state.showAddOptions ? 'True' : 'False'}`}>\n          <div className=\"flow-closePopup\" onClick={() => realAdd()}>\n            <Add />\n          </div>\n          <div className=\"flow-pos\">\n            <div className=\"flow-optionsTitle\">Options</div>\n            {comp.next.map((componentName, key) =>\n              <div\n                onClick={() => realAdd({ componentName })}\n                className=\"flow-option\"\n                key={key}\n              >{Logic ? Logic.title(componentName) : componentName}</div>\n            )}\n          </div>\n        </div>\n        : ''}\n      {comp.next.length > 0 ?\n        <div className=\"flow-side\">\n          <div className=\"flow-innerSide\">\n            <div className=\"flow-round\" onClick={() => potentialAdd()}>\n              <Add />\n            </div>\n          </div>\n        </div>\n        : ''}\n    </div>\n  )\n}\n","import React, { useEffect, useState, useRef } from 'react'\nimport Block from './block'\n\nconst GraphPart = function ({\n  connectTo,\n  forceUpdateParent,\n  itemWidth,\n  width,\n  Logic,\n  Tree,\n  data,\n  reRenderFullTree,\n}) {\n  const [connectionLine, setConnectionLine] = useState({\n    parentLineHeight: 0,\n    parentLineToTop: 0,\n    type: '',\n  })\n\n  const [_, setForceUpdateState] = useState(false)\n  const forceUpdate = () => setForceUpdateState(v => !v)\n\n  const blockContainer = useRef(null)\n\n  function getConnectionLine() {\n    let parentLineHeight = 0\n    let parentLineToTop = 0\n    let type = ''\n\n    if (connectTo && blockContainer.current) {\n      let parent = connectTo.getBoundingClientRect()\n      let child = blockContainer.current.getBoundingClientRect()\n      let spaceBetween = (parent.y + (parent.height / 2)) - (child.y + (child.height / 2))\n\n      if (spaceBetween == 0) {\n        parentLineHeight = 20\n        parentLineToTop = 10\n        type = 'straight'\n      } else if (spaceBetween < 0) {\n        parentLineHeight = ((-spaceBetween) + 20)\n        parentLineToTop = parentLineHeight - 10\n        type = 'bottomToTop'\n      } else {\n        parentLineHeight = spaceBetween + 20\n        parentLineToTop = 10\n        type = 'topToBottom'\n      }\n    }\n\n    return {\n      parentLineHeight,\n      parentLineToTop,\n      type,\n    }\n  }\n\n  const {\n    parentLineHeight,\n    parentLineToTop,\n    type,\n  } = getConnectionLine()\n\n  function checkConnectionLine() {\n    if (!connectTo || !blockContainer.current) return\n\n    const {\n      parentLineHeight,\n      parentLineToTop,\n      type,\n    } = getConnectionLine()\n\n    if (\n      parentLineHeight != connectionLine.parentLineHeight\n      || parentLineToTop != connectionLine.parentLineToTop\n      || type != connectionLine.type\n    ) {\n      setConnectionLine({\n        parentLineHeight,\n        parentLineToTop,\n        type,\n      })\n    }\n  }\n\n  useEffect(() => {\n    const checkPositionsLoop = setInterval(() => checkConnectionLine(), 700);\n    return () => clearInterval(checkPositionsLoop);\n  }, [connectionLine, connectTo, blockContainer])\n\n  useEffect(() => {\n    if (connectTo) forceUpdate()\n  }, [connectTo])\n\n  return (\n    <div className=\"flow-graphPart\" style={{ width }}>\n      {parentLineHeight && parentLineToTop && type ?\n        <div className=\"flow-lineToParrent\" style={{ bottom: `${parentLineToTop}px` }}>\n          <svg viewBox={`0 0 80 ${parentLineHeight}`} height={`${parentLineHeight}px`} style={{ minHeight: `${parentLineHeight}px` }} xmlns=\"http://www.w3.org/2000/svg\">\n            {type == 'bottomToTop' ?\n              <path\n                strokeWidth=\"7\"\n                stroke=\"#ccc\"\n                strokeLinecap=\"round\"\n                fill=\"none\"\n                d={`M0,10 C70,10 30,${parentLineHeight - 10} 80,${parentLineHeight - 10}`}\n              />\n              : type == 'topToBottom' ?\n                <path\n                  strokeWidth=\"7\"\n                  stroke=\"#ccc\"\n                  strokeLinecap=\"round\"\n                  fill=\"none\"\n                  d={`M0,${parentLineHeight - 10} C70,${parentLineHeight - 10} 30,10 80,10`}\n                />\n                :\n                <path\n                  strokeWidth=\"7\"\n                  stroke=\"#ccc\"\n                  strokeLinecap=\"round\"\n                  fill=\"none\"\n                  d=\"M0,10 C70,10 30,10 80,10\"\n                />\n            }\n          </svg>\n        </div>\n        : ''}\n      <div\n        ref={blockContainer}\n        className=\"flow-graph\"\n        style={{ minWidth: itemWidth }}\n      >\n        <Block\n          Tree={Tree}\n          Logic={Logic}\n          data={data}\n          graphInstanceForceUpdate={forceUpdate}\n          graphParrentInstanceForceUpdate={forceUpdateParent}\n          reRenderFullTree={reRenderFullTree}\n        />\n      </div>\n      <div className=\"flow-next\">\n        {data.next.map((item, i) =>\n          <GraphPart\n            Tree={Tree}\n            Logic={Logic}\n            connectTo={blockContainer.current}\n            forceUpdateParent={forceUpdate}\n            width={width - itemWidth}\n            itemWidth={itemWidth}\n            key={i}\n            data={item}\n            reRenderFullTree={reRenderFullTree}\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default GraphPart\n","import React, { useEffect, useState } from 'react'\nimport './style.styl'\nimport LogicClass from './src/logic'\nimport TreeClass from './src/flowTree'\nimport AddButton from './src/addbutton'\nimport GraphPart from './src/graphPart'\nimport sha1 from 'js-sha1'\n\nclass LastLogicHash {\n  constructor() {\n    this.val = ''\n  }\n}\n\nexport default function FlowMaker({ flow, logic, onChange }) {\n  const [_, setForceUpdateVal] = useState(false);\n  const forceUpdate = () => setForceUpdateVal(v => !v);\n\n  const [Logic] = useState(new LogicClass())\n  const [Tree] = useState(new TreeClass(Logic, forceUpdate))\n\n  const [lastlogicHash] = useState(new LastLogicHash)\n\n  const [settings, setSettings] = useState(Logic.get())\n\n  function afterMount() {\n    if (typeof onChange == 'function')\n      Tree.setExportFunc(onChange)\n    if (typeof flow == 'object')\n      Tree.import(flow)\n  }\n\n  useEffect(() => {\n    const newHash = sha1(logic)\n    if (newHash != lastlogicHash.val) {\n      lastlogicHash.val = newHash\n      setSettings(Logic.parseNewLogic(logic))\n    } else {\n      afterMount()\n    }\n  }, [])\n\n  useEffect(() => {\n    afterMount()\n  }, [settings])\n\n  function forceReRender() {\n    setTimeout(() => {\n      window.requestAnimationFrame(() => {\n        forceUpdate()\n        setTimeout(() => {\n          forceUpdate()\n        }, 100)\n      })\n    }, 1);\n  }\n\n  return (\n    <div className=\"flowMakerComp\">\n      <div className=\"flowMakerContainer\" style={{ minWidth: `${250 + (380 * Tree.maxDepth)}px` }}>\n        <div className=\"flow-row\" style={{ minWidth: '250px' }}>\n          {settings.introComponents.length > 0 ?\n            <div className=\"flow-startPoint\">\n              <h3>Start here</h3>\n              <AddButton\n                Tree={Tree}\n                Logic={Logic}\n                options={settings.introComponents}\n                out={componentName => Tree.startFlow(componentName)}\n              />\n            </div>\n            : ''}\n        </div>\n\n        <div className=\"flow-actualGraph\" style={{ width: `${380 * Tree.maxDepth}px` }}>\n          {Tree.flow.map((item, i) =>\n            <GraphPart\n              Tree={Tree}\n              Logic={Logic}\n              width={380 * Tree.maxDepth}\n              itemWidth={380}\n              key={i}\n              data={item}\n              reRenderFullTree={forceReRender}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"names":["Logic","constructor","conf","components","introComponents","errors","title","compoentName","this","get","parseInput","input","warn","err","console","log","res","name","type","validation","tooltip","default","undefined","Array","isArray","options","map","option","optionID","value","filter","item","parseNewLogic","outErrs","data","push","join","component","i","alreadyUsedNames","toInsert","next","inputs","getInputs","advancedInputs","inputID","indexOf","toAdd","advanced","Object","keys","key","componentKey","RandomString","length","text","possible","charAt","Math","floor","random","Tree","forceUpdate","maxDepth","flow","exportBuzzy","reExport","exportFunc","setExportFunc","func","caclMaxDepth","vm","loopOverNext","depth","flowItem","lastIds","currentDepth","id","utils","path","inputData","inputValidation","startFlow","componentName","export","addComponent","toAppendOn","findPath","toReturn","removeComponent","assign","splice","itemToExport","inputErrors","error","setTimeout","toExport","mapOverNext","posInExpo","import","newFlow","mapOverFlow","arr","mapTo","toPush","reduce","acc","updateInputValue","field","Add","React","xmlns","width","height","viewBox","d","fill","Delete","DropDown","DropUp","Info","Check","Alert","className","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","AddButton","out","open","setOpen","useState","onClick","v","clickOption","ToolTip","tip","transparrent","RefID","val","Input","onChange","hiddenDropdown","refID","initalVal","internalRefID","state","setState","dropDownSelected","dropDownopen","isAfterInit","setIsAfterInit","setValue","setError","updateDefaultVal","defaultInput","inputEl","useEffect","Label","focus","ref","el","e","target","Block","graphInstanceForceUpdate","graphParrentInstanceForceUpdate","reRenderFullTree","hover","showAddOptions","showAdvanced","setShowAdvanced","_","setForceUpdateState","realAdd","comp","args","newInputs","parsedInput","onMouseEnter","onMouseLeave","showHasErrors","GraphPart","connectTo","forceUpdateParent","itemWidth","connectionLine","setConnectionLine","parentLineHeight","parentLineToTop","blockContainer","useRef","getConnectionLine","current","parent","getBoundingClientRect","child","spaceBetween","y","checkPositionsLoop","setInterval","checkConnectionLine","clearInterval","style","bottom","minHeight","minWidth","LastLogicHash","logic","setForceUpdateVal","LogicClass","TreeClass","lastlogicHash","settings","setSettings","afterMount","forceReRender","window","requestAnimationFrame","newHash","sha1"],"mappings":"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"}